
1. RUN EC2

ECS optimized amazon ami:
 
 sudo su -
 yum update -y
 yum install wget

 2. ATTACH THE VOLUME
 need to create a volume first, i created a volume of 2gb manually

 aws ec2 attach-volume --volume-id vol-06ce286891e0e83a4 --instance-id i-01f652fb4a4927599 --device /dev/sdf
 #this gets attached as xvdf (dont know why)
 # read this to format and attach it to a new folder (/jenkinshome)
 # https://devopscube.com/mount-ebs-volume-ec2-instance/



 3. Install JENKINS to the EC2 with JenkinsHome pointing to the atached volume

 install AWS CLI first
 try  >>>  aws ecr describe-repositories
 # if that command works, you might need to have registry authentication
 aws ecr get-login --region ca-central-1 --no-include-email --- MADE IMAGE HERE
# copy paste the login text
# Now you can pull your jenkins image from aws ecr
docker pull 952408268520.dkr.ecr.ca-central-1.amazonaws.com/jenkinsdocker:latest

### INSTALL JAVA

docker run --name myjenkins -p 6060:8080 -p 30000:50000 -v /dev/sdf:/var/jenkins_home 952408268520.dkr.ecr.ca-central-1.amazonaws.com/jenkinsdocker:latest


4. Logged into jenkins and made changes to it, created a couple of dummy plans to test it out.
Make sure your sec group allows traffic through 6060 in this case

5 . take snapshot of volume
aws ec2 create-snapshot --volume-id vol-06ce286891e0e83a4 --description "This is jenkins home march15"
# JQ the output and check that the status of the snapshot is complete before moving forward
aws ec2 describe-snapshots --snapshot-id snap-01da3a576e6014fb3

** configure the ec2, to not terminate the volume on stopping

6.  To detach the volume, we have to unmount first
https://devopscube.com/mount-ebs-volume-ec2-instance/


---------


AWSTemplateFormatVersion: '2010-09-09'
Description: Template for Lambda Sample.

Parameters:

  EnvName:
    Type: String
    Description: Name of an environment. 'dev', 'staging', 'prod' and any name.
    Default: dev
    
  LambdaServiceRole:
    Type: String
    Description: role of lambda for snapshotting
    Default: arn:aws:iam::952408268520:role/service-role/abs-snapshot-role-xznsj5je
    
  VolumeID: 
    Type: String
    Description: Volume to be snapshotted
    Default: vol-06ce286891e0e83a4
    

Resources:

   EventRule: 
  Type: AWS::Events::Rule
  Properties: 
    Description: "EventRule"
    EventPattern: 
      source: 
        - "aws.ec2"
      detail-type: 
        - "EC2 Instance State-change Notification"
      detail: 
        state: 
          - "stopping"
    State: "ENABLED"
    Targets: 
      - 
        Arn: 
          Fn::GetAtt: 
            - "LambdaFunction"
            - "Arn"
        Id: "TargetFunctionV1"
PermissionForEventsToInvokeLambda: 
  Type: AWS::Lambda::Permission
  Properties: 
    FunctionName: 
      Ref: "LambdaFunction"
    Action: "lambda:InvokeFunction"
    Principal: "events.amazonaws.com"
    SourceArn: 
      Fn::GetAtt: 
        - "EventRule"
        - "Arn"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: EBS-snapshooter-lambda-function-${EnvName}
      Runtime: python2.7
      Code:
        ZipFile: |
            import boto3;
            import datetime;
            import os;
            
            def lambda_handler(event, context):
                ec2 = boto3.client('ec2')
                ts = datetime.datetime.now()
                volumeID = os.environ['volumeID'] #"vol-06ce286891e0e83a4"
                reg = "ca-central-1"
                print "Backing up Jenkins Cluster state from %s at %s" % ( volumeID , datetime.datetime.now())
                # do snapshot
                result = ec2.create_snapshot(VolumeId=volumeID,Description='Snapshot Jenkins Master State for '+ts.strftime("%m/%d/%Y, %H:%M:%S"),
    						TagSpecifications=[{
            						'ResourceType': 'volume',
            						'Tags': [{
                    					'Key': 'string',
                    					'Value': 'string'
                						},]
        										},])
                # Get snapshot resource 
                snapshotId = result['SnapshotId']
                print "Snapshot id %s" % (snapshotId)
                
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: 10
      Role: !Ref LambdaServiceRole
      Environment:
        Variables:
           volumeID: !Ref VolumeID
      




